Metadata-Version: 2.4
Name: polcomply
Version: 0.1.0
Summary: Polish KSeF compliance toolkit
Author-email: e1washere <e1washere@example.com>
Project-URL: Homepage, https://github.com/e1washere/polcomply
Project-URL: Repository, https://github.com/e1washere/polcomply
Project-URL: Documentation, https://github.com/e1washere/polcomply#readme
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: Other/Proprietary License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Office/Business :: Financial :: Accounting
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: lxml>=4.9.0
Requires-Dist: typer[all]>=0.9.0
Requires-Dist: rich>=13.0.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: pyarrow>=10.0.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: openpyxl>=3.1.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"

# PolComply SDK

[![CI/CD Pipeline](https://github.com/e1washere/polcomply/actions/workflows/ci.yml/badge.svg)](https://github.com/e1washere/polcomply/actions/workflows/ci.yml)
[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![License: BSL 1.1](https://img.shields.io/badge/License-BSL%201.1-blue.svg)](LICENSE)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)
[![Linting: ruff](https://img.shields.io/badge/linting-ruff-yellow.svg)](https://github.com/astral-sh/ruff)
[![Type checking: mypy](https://img.shields.io/badge/type%20checking-mypy-blue.svg)](https://github.com/python/mypy)
[![Coverage](https://codecov.io/gh/e1washere/polcomply/branch/main/graph/badge.svg)](https://codecov.io/gh/e1washere/polcomply)

Polish KSeF compliance toolkit for FA-3 invoice validation and processing.

## üöÄ Quick Start

### 3 –∫–æ–º–∞–Ω–¥—ã –∏ –≥–æ—Ç–æ–≤–æ

**1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞:**
```bash
pip install -e .
```

**2. –í–∞–ª–∏–¥–∞—Ü–∏—è FA-3:**
```bash
python3 demo_cli.py your_invoice.xml
```

**3. HTML –æ—Ç—á—ë—Ç:**
```bash
python3 demo_cli.py your_invoice.xml --report report.html
```

### –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

**‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:**
```bash
$ python3 demo_cli.py tests/golden/fa3/valid_fv_b2b.xml
‚úÖ valid_fv_b2b.xml - VALID (0 errors)
```

**‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –æ—à–∏–±–∫–∞–º–∏:**
```bash
$ python3 demo_cli.py tests/golden/fa3/invalid_nip.xml --format summary
‚ùå INVALID - invalid_nip.xml (1 errors)
  ‚Ä¢ Line 19: Element 'NIP': [facet 'pattern'] The value '123456789' is not accepted by the pattern '[0-9]{10}'.
```

**üìä JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API:**
```bash
$ python3 demo_cli.py tests/golden/fa3/valid_fv_b2b.xml --format json
{
  "file": "tests/golden/fa3/valid_fv_b2b.xml",
  "is_valid": true,
  "errors": []
}
```

### Installation (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)

**Recommended: Using `uv` (fastest)**
```bash
uv add polcomply
```

**Alternative: Using `pipx` (isolated)**
```bash
pipx install polcomply
```

**Development: Using `pip`**
```bash
pip install -e ".[dev]"
```

### CLI Examples

```bash
# Validate FA-3 XML against XSD schema
polcomply validate invoice.xml --schema schemas/FA-3.xsd

# Convert CSV to FA-3 XML
polcomply map csv-to-fa input.csv --output invoice.xml --schema schemas/FA-3.xsd

# Show validation summary
polcomply validate invoice.xml --schema schemas/FA-3.xsd --format summary

# Verbose mapping with report
polcomply map csv-to-fa data.csv --output invoice.xml --verbose
```

### Python API Examples

```python
from polcomply.validators.xsd import XSDValidator, ValidationError
from polcomply.mapping.csv_to_fa import CSVToFAMapper, MappingError

# XSD Validation
validator = XSDValidator("schemas/FA-3.xsd")
with open("invoice.xml", "rb") as f:
    errors = validator.validate(f.read())

if errors:
    for error in errors:
        print(f"Error: {error.message} (line {error.line})")
else:
    print("‚úÖ XML is valid!")

# CSV to FA-3 Mapping
mapper = CSVToFAMapper("mapping/fa3.yaml")
xml_content = mapper.process_csv("invoice.csv", "output.xml")
print("‚úÖ FA-3 XML generated!")
```

## üìã Command Reference

| Command | Description | Example |
|---------|-------------|---------|
| `polcomply validate <file>` | Validate XML against XSD | `polcomply validate invoice.xml --schema fa3.xsd` |
| `polcomply map csv-to-fa <csv>` | Convert CSV to FA-3 XML | `polcomply map csv-to-fa data.csv --output invoice.xml` |
| `polcomply map invoice <file>` | General invoice mapping | `polcomply map invoice data.csv --output invoice.xml` |
| `polcomply map list` | List supported formats | `polcomply map list` |
| `polcomply version` | Show version info | `polcomply version` |
| `polcomply info` | Show system info | `polcomply info` |

### Validation Options

| Option | Description | Default |
|--------|-------------|---------|
| `--schema` | XSD schema file path | Required |
| `--format` | Output format (table/json/summary) | table |
| `--verbose` | Show detailed information | False |
| `--show-xml` | Display XML content | False |

### Mapping Options

| Option | Description | Default |
|--------|-------------|---------|
| `--output` | Output XML file path | Required |
| `--config` | Mapping configuration YAML | mapping/fa3.yaml |
| `--schema` | XSD schema for validation | None |
| `--validate` | Validate output XML | True |
| `--verbose` | Show mapping report | False |

## üîß How It Works

### XSD Validation

The SDK uses `lxml.etree.XMLSchema` for robust XML validation:

```python
# Core validation flow
1. Load XSD schema ‚Üí Parse XML document
2. Validate against schema ‚Üí Collect all errors
3. Return detailed error list ‚Üí No exceptions on first error
```

**Features:**
- ‚úÖ Complete error collection (not just first error)
- ‚úÖ Line/column position reporting
- ‚úÖ Error code classification
- ‚úÖ XML syntax + schema validation
- ‚úÖ No network dependencies

### CSV to FA-3 Mapping

Intelligent mapping from CSV/Excel to FA-3 XML:

```python
# Mapping pipeline
1. Read CSV/Excel ‚Üí Map columns to fields
2. Validate data types ‚Üí Check business rules
3. Generate FA-3 XML ‚Üí Validate output
4. Report missing fields ‚Üí Show mapping details
```

**Features:**
- ‚úÖ Flexible column mapping (YAML config)
- ‚úÖ Type validation (string, decimal, date, array)
- ‚úÖ Business rule validation (dates, VAT rates, amounts)
- ‚úÖ Missing field reporting
- ‚úÖ Support for all invoice types (VAT, KOREKTA, ZALICZKA, MPP)

### SDK Architecture

```
polcomply/
‚îú‚îÄ‚îÄ validators/          # XSD validation engine
‚îÇ   ‚îî‚îÄ‚îÄ xsd.py          # Core validator with error collection
‚îú‚îÄ‚îÄ mapping/            # CSV to FA-3 conversion
‚îÇ   ‚îú‚îÄ‚îÄ csv_to_fa.py   # Main mapper with validation
‚îÇ   ‚îî‚îÄ‚îÄ fa3.yaml       # Field mapping configuration
‚îú‚îÄ‚îÄ cli/               # Command-line interface
‚îÇ   ‚îú‚îÄ‚îÄ main.py        # Typer-based CLI
‚îÇ   ‚îî‚îÄ‚îÄ commands/      # Individual commands
‚îî‚îÄ‚îÄ tests/             # Comprehensive test suite
    ‚îú‚îÄ‚îÄ validators/    # XSD validator tests
    ‚îî‚îÄ‚îÄ mapping/       # Mapping tests with golden files
```

**SDK Stubs:**
- `auth/` - KSeF authentication (planned)
- `transport/` - API communication (planned)
- `client/` - High-level SDK client (planned)

## üß™ Testing

```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=polcomply --cov-report=html

# Run specific test file
pytest tests/validators/test_xsd.py

# Run tests with golden files
pytest tests/validators/test_xsd.py::TestGoldenFiles

# Run mapping tests
pytest tests/mapping/test_csv_to_fa.py
```

## üîÑ CI/CD Pipeline

The project uses GitHub Actions for continuous integration and deployment:

- **Lint & Format**: Black, Ruff, MyPy
- **Testing**: pytest with coverage reporting
- **Security**: Safety and Bandit scans
- **Build**: Package building and validation
- **CLI Tests**: Integration tests for command-line interface

The pipeline runs on Python 3.11 and 3.12, ensuring compatibility across versions.

## ü§ù Contributing

We welcome contributions! Please follow these guidelines:

### Development Setup

```bash
# Clone repository
git clone https://github.com/e1washere/polcomply.git
cd polcomply

# Install in development mode
pip install -e ".[dev]"

# Install pre-commit hooks
pre-commit install
```

### Code Quality

**Pre-commit hooks** ensure code quality:
- **Black**: Automatic code formatting
- **Ruff**: Fast linting and import sorting
- **MyPy**: Static type checking
- **Tests**: Run tests before commit

**Type Annotations:**
- All public functions must have type hints
- Use `typing` module for complex types
- MyPy strict mode enabled

**Testing Requirements:**
- New features require tests
- Maintain 85%+ test coverage
- Use pytest fixtures for test data
- Golden files for integration tests

### Pull Request Process

1. **Fork** the repository
2. **Create** feature branch (`git checkout -b feature/amazing-feature`)
3. **Commit** changes (`git commit -m 'Add amazing feature'`)
4. **Push** to branch (`git push origin feature/amazing-feature`)
5. **Open** Pull Request

**PR Requirements:**
- ‚úÖ All tests pass
- ‚úÖ Code coverage maintained
- ‚úÖ Type checking passes
- ‚úÖ Linting passes
- ‚úÖ Documentation updated

## üìö API Reference

### XSDValidator

```python
class XSDValidator:
    def __init__(self, schema_path: Path)
    def validate(self, xml_bytes: bytes) -> List[ValidationError]
    def validate_file(self, xml_path: Path) -> List[ValidationError]
    def is_valid(self, xml_bytes: bytes) -> bool
    def is_valid_file(self, xml_path: Path) -> bool
    def get_schema_info(self) -> Dict[str, Any]
```

### CSVToFAMapper

```python
class CSVToFAMapper:
    def __init__(self, config_path: Path)
    def read_csv(self, csv_path: Path, **kwargs) -> pd.DataFrame
    def map_columns(self, df: pd.DataFrame, column_mapping: Optional[Dict[str, str]] = None) -> pd.DataFrame
    def validate_data(self, df: pd.DataFrame) -> List[MappingError]
    def generate_xml(self, df: pd.DataFrame) -> str
    def process_csv(self, csv_path: Path, output_path: Optional[Path] = None, column_mapping: Optional[Dict[str, str]] = None) -> str
    def get_missing_fields_report(self, df: pd.DataFrame) -> Dict[str, List[Dict[str, Any]]]
```

### ValidationError

```python
class ValidationError(Exception):
    def __init__(self, message: str, line: int | None = None, column: int | None = None, code: str | None = None)
    def to_dict(self) -> Dict[str, Any]
```

### MappingError

```python
class MappingError(Exception):
    def __init__(self, message: str, field: str | None = None, row: int | None = None)
```

## üöß Limitations & Roadmap

### Current Limitations

**XSD Validation:**
- ‚ö†Ô∏è Requires local XSD schema files (no remote loading)
- ‚ö†Ô∏è Limited to lxml-supported XSD features
- ‚ö†Ô∏è Error log iteration may vary by lxml version

**CSV Mapping:**
- ‚ö†Ô∏è Single invoice per CSV file (no batch processing)
- ‚ö†Ô∏è Basic business rule validation only
- ‚ö†Ô∏è No support for complex nested structures
- ‚ö†Ô∏è Limited Excel format support

**CLI:**
- ‚ö†Ô∏è No interactive mode
- ‚ö†Ô∏è Limited output format options
- ‚ö†Ô∏è No progress indicators for large files

### Roadmap

**Q1 2024:**
- ‚úÖ XSD validation engine
- ‚úÖ CSV to FA-3 mapping
- ‚úÖ CLI interface
- ‚úÖ Basic test coverage

**Q2 2024:**
- üîÑ KSeF API integration
- üîÑ Authentication module
- üîÑ Transport layer
- üîÑ High-level SDK client

**Q3 2024:**
- üìã Batch processing support
- üìã Advanced business rules
- üìã Interactive CLI mode
- üìã Plugin system

**Q4 2024:**
- üìã Web interface
- üìã Database integration
- üìã Performance optimization
- üìã Enterprise features

### Known Issues

- **Test Coverage**: Currently at 59%, target is 85%
- **Golden Files**: Some test fixtures need updating
- **Type Stubs**: lxml error log iteration needs refinement
- **CLI Entry Point**: Module import issues in some environments

### Contributing to Roadmap

We welcome contributions to any roadmap items! Please:

1. **Check** existing issues and PRs
2. **Discuss** major changes in issues first
3. **Follow** the contributing guidelines
4. **Update** documentation and tests

## üìÑ License

This project is licensed under the Business Source License 1.1 (BSL) - see the [LICENSE](LICENSE) file for details.

**Key Points:**
- ‚úÖ Free for non-commercial use
- ‚úÖ Commercial use requires license
- ‚úÖ Converts to GPL-3.0 after 4 years
- ‚úÖ Source code available

## üôè Acknowledgments

- **lxml** - Robust XML processing
- **Typer** - Modern CLI framework
- **Rich** - Beautiful terminal output
- **pandas** - Data manipulation
- **pytest** - Testing framework

---

**Made with ‚ù§Ô∏è for Polish tax compliance**
